package com.transacciones.transaction_ingestor.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.transacciones.transaction_ingestor.dto.TransactionDTO;
import com.transacciones.transaction_ingestor.model.Transaccion;
import com.transacciones.transaction_ingestor.model.Usuario;
import com.transacciones.transaction_ingestor.repository.TransactionRepository;
import com.transacciones.transaction_ingestor.repository.UsuarioRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.UUID;

@Service
public class TransactionService {

    private static final Logger log = LoggerFactory.getLogger(TransactionService.class);
    private static final BigDecimal MAX_TRANSACTION_AMOUNT = new BigDecimal("10000.00");


    private final TransactionRepository transactionRepository;
    private final UsuarioRepository usuarioRepository;
    private final ObjectMapper objectMapper;

    public TransactionService(TransactionRepository transactionRepository,
                              UsuarioRepository usuarioRepository,
                              ObjectMapper objectMapper) {
        this.transactionRepository = transactionRepository;
        this.usuarioRepository = usuarioRepository;
        this.objectMapper = objectMapper;
    }

    @Transactional
    public Transaccion ingestAndSave(Transaccion transaction) {
        // Log ‚Äústreaming‚Äù (tu salida actual)
        System.out.println("\n---------------------------------------------");
        System.out.printf("üõ∞Ô∏è  SIMULACI√ìN DE STREAMING DE DATOS RECIBIDA:%n" +
                "ID: %s | User: %s | Monto: %s | Ubicaci√≥n: %s%n",
                transaction.getIdTransaccion(),
                transaction.getIdUsuario(),
                transaction.getMonto(),
                (transaction.getLatitud() != null && transaction.getLongitud() != null)
                        ? transaction.getLatitud() + "," + transaction.getLongitud()
                        : "N/A");
        System.out.println("‚úÖ  Datos validados y listos para persistencia.");
        System.out.println("---------------------------------------------\n");

        // 1) Resolver/crear Usuario a partir de idUsuario (del JSON)
        String idUsuario = transaction.getIdUsuario();
        if (idUsuario == null || idUsuario.isBlank()) {
            throw new IllegalArgumentException("idUsuario es obligatorio");
        }

        Usuario usuario = usuarioRepository.findById(idUsuario)
                .orElseGet(() -> {
                    Usuario u = new Usuario();
                    u.setIdUsuario(idUsuario);
                    // Defaults simples; pod√©s ajustarlos
                    u.setPais(transaction.getPais()); // o "AR" si viene null
                    u.setFechaCreacion(Timestamp.valueOf(LocalDateTime.now()));
                    u.setEstadoCuenta("activa");
                    return usuarioRepository.save(u);
                });

        // 2) Setear la relaci√≥n en la Transaccion
        transaction.setUsuario(usuario);

        // 3) Guardar el JSON crudo (√∫til para auditor√≠a)
        try {
            transaction.setRawJson(objectMapper.writeValueAsString(transaction));
        } catch (Exception ignore) {
            /* opcional: loggear */ }

        // 4) Persistir
        return transactionRepository.save(transaction);
    }
    // ========================================
    // NUEVOS M√âTODOS PARA KAFKA
    // ========================================
    
    /**
     * Valida una transacci√≥n recibida desde Kafka
     * @param dto TransactionDTO recibido del topic de Kafka
     * @return true si es v√°lida, false si debe rechazarse
     */
    public boolean validateTransaction(TransactionDTO dto) {
        log.debug("Validando transacci√≥n desde Kafka: {}", dto);

        // Validaci√≥n 1: Monto no excede el l√≠mite
        if (dto.getAmount() != null && dto.getAmount().compareTo(MAX_TRANSACTION_AMOUNT) > 0) {
            log.warn("Transacci√≥n rechazada: monto excede el l√≠mite permitido");
            dto.setRejectionReason("Monto excede el l√≠mite de " + MAX_TRANSACTION_AMOUNT);
            return false;
        }

        // Validaci√≥n 2: Tipo de transacci√≥n v√°lido
        if (!isValidTransactionType(dto.getType())) {
            log.warn("Transacci√≥n rechazada: tipo de transacci√≥n inv√°lido");
            dto.setRejectionReason("Tipo de transacci√≥n inv√°lido: " + dto.getType());
            return false;
        }

        // Validaci√≥n 3: Campos obligatorios
        if (dto.getAccountId() == null || dto.getAccountId().isEmpty()) {
            log.warn("Transacci√≥n rechazada: ID de cuenta vac√≠o");
            dto.setRejectionReason("ID de cuenta es requerido");
            return false;
        }

        return true;
    }

    /**
     * Convierte TransactionDTO (de Kafka) a Transaccion (entity) y guarda
     * @param dto TransactionDTO validado
     * @return Transaccion guardada
     */
    @Transactional
    public Transaccion saveTransactionFromDTO(TransactionDTO dto) {
        log.info("Guardando transacci√≥n desde Kafka: {}", dto);

        // Crear nueva transacci√≥n
        Transaccion transaction = new Transaccion();
        
        if (dto.getId() == null || dto.getId().isEmpty()) {
            transaction.setIdTransaccion(UUID.randomUUID().toString());
        } else {
            transaction.setIdTransaccion(dto.getId());
        }

        // Mapear campos del DTO a la entidad
        transaction.setIdUsuario(dto.getAccountId());
        transaction.setMonto(dto.getAmount());
        
        // Usar el m√©todo original para guardar (reutilizar l√≥gica existente)
        return ingestAndSave(transaction);
    }

    private boolean isValidTransactionType(String type) {
        return type != null && 
               (type.equals("DEPOSIT") || type.equals("WITHDRAWAL") || type.equals("TRANSFER"));
    }
}
