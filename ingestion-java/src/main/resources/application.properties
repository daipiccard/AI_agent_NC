# spring.application.name=transaction-ingestor

# ================================================================
# CONFIGURACIÓN DE BASE DE DATOS MYSQL
# =================================================================

# Parametros de conexion a la base de datos
# Se conecta a la base de datos 'db_transacciones' en localhost puerto 3306
spring.datasource.url=jdbc:mysql://localhost:3306/db_transacciones?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
# Reemplazar usuario con el nombre de usuario de MySQL
spring.datasource.username=root
# Reemplazar password con el password de MySQL
spring.datasource.password=root1234

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Configuracion de JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


# Exponer el servicio HTTP en el mismo puerto que consume el dashboard
server.port=8000

#================================================================
# CONFIGURACIÓN DE KAFKA
# ================================================================
# Dirección del servidor Kafka (broker)
spring.kafka.bootstrap-servers=localhost:9092

# ----------------------------------------------------------------
# CONFIGURACIÓN DEL PRODUCER (Productor de mensajes)
# ----------------------------------------------------------------
# Serializador para las claves de los mensajes (String)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Serializador para los valores (objetos Java convertidos a JSON)
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Esperar confirmación de todas las réplicas antes de considerar exitoso el envío
spring.kafka.producer.acks=all
# Número de reintentos en caso de fallo
spring.kafka.producer.retries=3
# Tiempo de espera antes de enviar un batch (milisegundos)
spring.kafka.producer.properties.linger.ms=1
# Tamaño del batch para agrupar mensajes
spring.kafka.producer.properties.batch.size=16384

# ----------------------------------------------------------------
# CONFIGURACIÓN DEL CONSUMER (Consumidor de mensajes)
# ----------------------------------------------------------------
# ID del grupo de consumidores
spring.kafka.consumer.group-id=transaction-consumer-group
# Estrategia cuando no existe offset previo (earliest: desde el inicio, latest: desde ahora)
spring.kafka.consumer.auto-offset-reset=earliest
# Deserializador para las claves
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Deserializador para los valores (JSON a objetos Java)
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Confiar en todos los paquetes para deserialización
spring.kafka.consumer.properties.spring.json.trusted.packages=*
# Mapeo de tipos para deserialización correcta
spring.kafka.consumer.properties.spring.json.type.mapping=transaction:com.transacciones.transaction_ingestor.dto.TransactionDTO
# Deshabilitar auto-commit para control manual
spring.kafka.consumer.enable-auto-commit=false
# Número máximo de registros a procesar por poll
spring.kafka.consumer.max-poll-records=100

# ----------------------------------------------------------------
# CONFIGURACIÓN DEL LISTENER
# ----------------------------------------------------------------
# Modo de confirmación manual para mejor control
spring.kafka.listener.ack-mode=manual

# ----------------------------------------------------------------
# NOMBRES DE LOS TOPICS DE KAFKA
# ----------------------------------------------------------------
# Topic para transacciones nuevas (entrada)
kafka.topics.transaction-input=transaction-input-topic
# Topic para transacciones validadas
kafka.topics.transaction-validated=transaction-validated-topic
# Topic para transacciones rechazadas
kafka.topics.transaction-rejected=transaction-rejected-topic

# ================================================================
# CONFIGURACIÓN DE LOGGING
# ================================================================
# Nivel de log general
logging.level.root=INFO
# Nivel de log para tu aplicación
logging.level.com.transacciones=DEBUG
# Nivel de log para Spring Kafka
logging.level.org.springframework.kafka=DEBUG
# Nivel de log para Apache Kafka (reducido para evitar spam)
logging.level.org.apache.kafka=WARN